/** Configures trigger -> command bindings */
  private void configureBindings() {
    autonomous().whileTrue(new ProxyCommand(autos::get));

    driver.y().and(driver.x()).whileTrue(drive.move(Drive.Direction.FORWARD_LEFT, 5));
    driver.y().and(driver.a()).whileTrue(drive.move(Drive.Direction.FORWARD_RIGHT, 5));
    driver.b().and(driver.x()).whileTrue(drive.move(Drive.Direction.BACKWARD_LEFT, 5));
    driver.b().and(driver.a()).whileTrue(drive.move(Drive.Direction.BACKWARD_RIGHT, 5));

    driver
        .y()
        .and(driver.x().negate())
        .and(driver.a().negate())
        .whileTrue(drive.move(Drive.Direction.FORWARD, 10));
    driver
        .b()
        .and(driver.x().negate())
        .and(driver.a().negate())
        .whileTrue(drive.move(Drive.Direction.BACKWARD, 10));
    driver
        .a()
        .and(driver.y().negate())
        .and(driver.b().negate())
        .whileTrue(drive.move(Drive.Direction.TURN_RIGHT, 10));
    driver
        .x()
        .and(driver.y().negate())
        .and(driver.b().negate())
        .whileTrue(drive.move(Drive.Direction.TURN_LEFT, 10));
  }

  @LogBoth
  public boolean aIsPressed() {
    return driver.a().getAsBoolean();
  }

  @LogBoth
  public boolean bIsPressed() {
    return driver.b().getAsBoolean();
  }

  @LogBoth
  public boolean xIsPressed() {
    return driver.x().getAsBoolean();
  }

  @LogBoth
  public boolean yIsPressed() {
    return driver.y().getAsBoolean();
  }

  public Command move(Direction d, double speed) {
    return switch (d) {
      case FORWARD_LEFT -> setMotorSpeeds(() -> 0.5 * speed, () -> speed);
      case FORWARD_RIGHT -> setMotorSpeeds(() -> speed, () -> 0.5 * speed);
      case BACKWARD_LEFT -> setMotorSpeeds(() -> -0.5 * speed, () -> -speed);
      case BACKWARD_RIGHT -> setMotorSpeeds(() -> -speed, () -> -0.5 * speed);

      case FORWARD -> setMotorSpeeds(() -> speed, () -> speed);
      case BACKWARD -> setMotorSpeeds(() -> -speed, () -> -speed);
      case TURN_LEFT -> setMotorSpeeds(() -> -speed, () -> speed);
      case TURN_RIGHT -> setMotorSpeeds(() -> speed, () -> -speed);
    };
  }

  public static enum Direction {
    FORWARD,
    FORWARD_LEFT,
    FORWARD_RIGHT,
    BACKWARD,
    BACKWARD_LEFT,
    BACKWARD_RIGHT,
    TURN_RIGHT,
    TURN_LEFT
  }